# retrieve valid GitHub urls, given the repo urls and file paths of a set of code examples
p: Project = input;
#record: output collection[string] of string;
#record_time: output collection[string] of time;
#dev: output collection[string] of int;
pj: output collection[string] of time;
pj1: output sum[string] of int;

# repo urls of selected code examples
q_urls : array of string;
q_urls = {repoURL};

q_files: array of string;
q_files = {pathURL};

last_commit_sha1 : string;
last_commit_message : string;
last_commit_date : time;
committers: map[string] of bool;

# Merge revisions (merging from branches) are associated with empty files
# merge_filter := "merge";

# Get the last snapshot of a given file in a given GitHub repo
getLastSnapshot := function(repo : CodeRepository, file : string) : ChangedFile {
    snapshot : ChangedFile;
    commit_sha1 : string;
    commit_message : string;
    commit_time : time;
    
    visit(repo, visitor {
        before node: Revision -> {
            #if (match(merge_filter, lowercase(node.log))) stop;
            commit_sha1 = node.id;
            commit_message = node.log;
            commit_time = node.commit_date;
            

        }
        
        before node: ChangedFile -> {
            if (node.name != file) stop;
            snapshot = node;
            last_commit_sha1 = commit_sha1;
            last_commit_message = commit_message;
            last_commit_date  = commit_time;
        }
    });
    
    return snapshot;
};

#visit(p, visitor {
#	before node: Revision ->
#		if (!haskey(committers, node.committer.username)) {
#			committers[node.committer.username] = true;
#			counts[p.id] << 1;
#		}
#});
visit(p, visitor {
	before node: CodeRepository -> {
	    foreach(i:int; def(q_urls[i])) {
	        q_url := q_urls[i];
	        if(p.project_url == q_url) {
	           q_file := q_files[i];
	           snapshot := getLastSnapshot(node, q_file); 
#	           id := format("%s ** %s", q_url, q_file);
#	           urls := format("%s/blob/%s/%s", q_url, last_commit_sha1, q_file);
#	           record[id] << urls;
#	           record_time[id] << p.created_date;
#               dev[id] << len(p.developers);
##	           foreach(j:int; def(dev[j]){
##	               record_dev[id] << dev[j].username;
##	           }

	           pj[q_url+"/"+q_file] << last_commit_date;
#	           pj1[q_url+"/"+q_file] << len(p.developers) + 1;
	           foreach (j: int; def(p.code_repositories[j]))
                	foreach (z: int; def(p.code_repositories[j].revisions[z]))
                		committers[p.code_repositories[j].revisions[z].committer.username] = true;
            
                if (len(committers) > 0)
                	pj1[q_url+"/"+q_file] << len(committers);
	        }
	    }
	    
	    stop;
	}

});